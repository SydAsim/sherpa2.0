import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Helmet } from 'react-helmet';
import {
  Upload,
  FileText,
  AlertTriangle,
  CheckCircle,
  Loader2,
  Download,
  Eye,
  Trash2,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import Navbar from '@/components/Layout/Navbar';
import Sidebar from '@/components/Layout/Sidebar';

const FeedVulnerability = () => {
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResults, setAnalysisResults] = useState([]);
  const [dragActive, setDragActive] = useState(false);
  const [apiKey, setApiKey] = useState('');
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  // Handle file upload
  const handleFileUpload = (files) => {
    const newFiles = Array.from(files).map(file => ({
      id: Date.now() + Math.random(),
      file,
      name: file.name,
      size: file.size,
      type: file.type,
      uploadedAt: new Date().toISOString(),
      status: 'uploaded',
      analysis: null
    }));
    
    setUploadedFiles(prev => [...prev, ...newFiles]);
  };

  // Handle drag and drop
  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFileUpload(e.dataTransfer.files);
    }
  };

  // Read file content
  const readFileContent = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => resolve(e.target.result);
      reader.onerror = (e) => reject(e);
      reader.readAsText(file);
    });
  };

  // Analyze file with Gemini API
  const analyzeWithGemini = async (fileContent, fileName) => {
    const apiKey = "AIzaSyAeK7laeYSEwDXffd0PzAr-6Fm_fwrChGg";
    const prompt = `
    You are a cybersecurity expert. Analyze the following file content for potential security vulnerabilities and provide a detailed report.

    File: ${fileName}
    Content:
    ${fileContent}

    Please provide:
    1. Overall security assessment (Critical/High/Medium/Low)
    2. List of identified vulnerabilities with severity levels
    3. Specific recommendations for remediation
    4. Best practices to prevent similar issues
    5. Risk score (1-10)

    Format your response as a structured analysis report.
    `;

    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        })
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }

      const data = await response.json();
      return data.candidates[0].content.parts[0].text;
    } catch (error) {
      throw new Error(`Analysis failed: ${error.message}`);
    }
  };

  // Handle file analysis
  const handleAnalyzeFile = async (fileId) => {
    const file = uploadedFiles.find(f => f.id === fileId);
    if (!file) return;

    setIsAnalyzing(true);
    
    try {
      // Update file status

    const fileContent = await readFileContent(file.file);
    // Set preview (first 20 lines or 1000 chars)
    const preview = fileContent
      .split('\n').slice(0, 20).join('\n')
      .slice(0, 1000);
    setUploadedFiles(prev => prev.map(f =>
      f.id === fileId ? { ...f, preview } : f
    ));
    const apiKey = "AIzaSyAeK7laeYSEwDXffd0PzAr-6Fm_fwrChGg";
    const analysis = await analyzeWithGemini(fileContent, file.name, apiKey);
      
    // Parse analysis to extract severity
    const severity = analysis.toLowerCase().includes('critical') ? 'Critical' :
                    analysis.toLowerCase().includes('high') ? 'High' :
                    analysis.toLowerCase().includes('medium') ? 'Medium' : 'Low';

      const analysisResult = {
        id: fileId,
        fileName: file.name,
        analysis,
        severity,
        analyzedAt: new Date().toISOString(),
        riskScore: Math.floor(Math.random() * 10) + 1 // Simple random score for demo
      };

      setAnalysisResults(prev => [...prev, analysisResult]);
      
      // Update file status
      setUploadedFiles(prev => prev.map(f => 
        f.id === fileId ? { ...f, status: 'analyzed', analysis: analysisResult } : f
      ));

    } catch (error) {
      console.error('Analysis error:', error);
      setUploadedFiles(prev => prev.map(f => 
        f.id === fileId ? { ...f, status: 'error', error: error.message } : f
      ));
    } finally {
      setIsAnalyzing(false);
    }
  };

  // Remove file
  const removeFile = (fileId) => {
    setUploadedFiles(prev => prev.filter(f => f.id !== fileId));
    setAnalysisResults(prev => prev.filter(r => r.id !== fileId));
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'Critical': return 'bg-red-500';
      case 'High': return 'bg-orange-500';
      case 'Medium': return 'bg-yellow-500';
      case 'Low': return 'bg-green-500';
      default: return 'bg-gray-500';
    }
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div className="min-h-screen bg-background">
      <Helmet>
        <title>Feed Vulnerability - SHERPA AI</title>
      </Helmet>
      
      <Navbar showMenu onMenuClick={() => setIsSidebarOpen(true)} />
      <Sidebar isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />
      
      <main className="pt-16 md:ml-64 px-4 py-6 md:p-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="max-w-6xl mx-auto space-y-6"
        >
          {/* Header */}
          <div className="flex items-center justify-between flex-wrap gap-3">
            <div>
              <h1 className="text-3xl font-bold">Feed Vulnerability</h1>
              <p className="text-muted-foreground">
                Upload files for AI-powered vulnerability analysis using Gemini
              </p>
            </div>
          </div>



          {/* File Upload Area */}
          <Card>
            <CardHeader>
              <CardTitle>Upload Files for Analysis</CardTitle>
              <CardDescription>
                Drop files here or click to browse. Supports code files, configuration files, and documents.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div
                className={`border-2 border-dashed rounded-lg p-6 md:p-8 text-center transition-colors ${
                  dragActive ? 'border-primary bg-primary/5' : 'border-muted-foreground/25'
                }`}
                onDragEnter={handleDrag}
                onDragLeave={handleDrag}
                onDragOver={handleDrag}
                onDrop={handleDrop}
              >
                <Upload className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
                <p className="text-lg font-medium mb-2">Drop files here to upload</p>
                <p className="text-muted-foreground mb-4">or</p>
                <Button
                  onClick={() => document.getElementById('fileInput').click()}
                  variant="outline"
                >
                  Browse Files
                </Button>
                <input
                  id="fileInput"
                  type="file"
                  multiple
                  className="hidden"
                  onChange={(e) => handleFileUpload(e.target.files)}
                  accept=".js,.jsx,.ts,.tsx,.py,.java,.cpp,.c,.php,.rb,.go,.rs,.json,.xml,.yaml,.yml,.config,.env"
                />
              </div>
            </CardContent>
          </Card>

          {/* Uploaded Files */}
          {uploadedFiles.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle>Uploaded Files</CardTitle>
                <CardDescription>
                  Manage and analyze your uploaded files
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {uploadedFiles.map((file) => (
                    <div key={file.id} className="flex items-center justify-between p-4 border rounded-lg gap-3 flex-wrap">
                      <div className="flex items-center space-x-4 min-w-0">
                        <FileText className="h-8 w-8 text-muted-foreground" />
                        <div>
                          <p className="font-medium break-words max-w-[260px] md:max-w-none">{file.name}</p>
                          <p className="text-sm text-muted-foreground">
                            {formatFileSize(file.size)} â€¢ {new Date(file.uploadedAt).toLocaleString()}
                          </p>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-2 flex-wrap gap-2">
                        {file.status === 'uploaded' && (
                          <Button
                            onClick={() => handleAnalyzeFile(file.id)}
                            disabled={!apiKey || isAnalyzing}
                            size="sm"
                          >
                            {isAnalyzing ? (
                              <Loader2 className="h-4 w-4 animate-spin mr-2" />
                            ) : (
                              <Eye className="h-4 w-4 mr-2" />
                            )}
                            Analyze
                          </Button>
                        )}
                        
                        {file.status === 'analyzing' && (
  <div className="flex flex-col items-start">
    <Badge variant="secondary" className="mb-2">
      <Loader2 className="h-3 w-3 animate-spin mr-1" />
      Analyzing...
    </Badge>
    {file.file && (
      <div className="bg-muted/50 rounded p-2 text-xs max-w-xl max-h-40 overflow-auto border w-full">
        <span className="font-semibold">File Preview:</span>
        <pre className="whitespace-pre-wrap break-words mt-1">
          {(() => {
            // Read the file content for preview (first 20 lines or 1000 chars)
            // If file.preview exists, use it; otherwise, show 'Loading preview...'
            if (file.preview) return file.preview;
            return 'Loading preview...';
          })()}
        </pre>
      </div>
    )}
  </div>
)}
                        
                        {file.status === 'analyzed' && (
                          <Badge className={getSeverityColor(file.analysis.severity)}>
                            {file.analysis.severity}
                          </Badge>
                        )}
                        
                        {file.status === 'error' && (
                          <Badge variant="destructive">
                            <AlertTriangle className="h-3 w-3 mr-1" />
                            Error
                          </Badge>
                        )}
                        
                        <Button
                          onClick={() => removeFile(file.id)}
                          variant="ghost"
                          size="sm"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Analysis Results */}
          {analysisResults.length > 0 && (
            <div className="space-y-4">
              <h2 className="text-2xl font-bold">Analysis Results</h2>
              {analysisResults.map((result) => (
                <Card key={result.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between flex-wrap gap-2">
                      <CardTitle className="flex items-center space-x-2">
                        <FileText className="h-5 w-5" />
                        <span>{result.fileName}</span>
                      </CardTitle>
                      <div className="flex items-center space-x-2 flex-wrap gap-2">
                        <Badge className={getSeverityColor(result.severity)}>
                          {result.severity}
                        </Badge>
                        <Badge variant="outline">
                          Risk Score: {result.riskScore}/10
                        </Badge>
                      </div>
                    </div>
                    <CardDescription>
                      Analyzed on {new Date(result.analyzedAt).toLocaleString()}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="prose max-w-none">
                      <pre className="whitespace-pre-wrap break-words text-sm bg-muted p-4 rounded-lg overflow-auto">
                        {result.analysis}
                      </pre>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}

          {/* Help Section */}
          <Card className="border-yellow-200 bg-yellow-50 dark:border-yellow-800 dark:bg-yellow-950">
            <CardContent className="pt-6">
              <div className="flex items-start space-x-3">
                <AlertTriangle className="h-5 w-5 text-yellow-600 dark:text-yellow-400 mt-0.5 flex-shrink-0" />
                <div className="text-sm">
                  <p className="font-medium text-yellow-800 dark:text-yellow-200 mb-1">Important Note</p>
                  <p className="text-yellow-700 dark:text-yellow-300">
                    This feature uses the free Gemini API for vulnerability analysis. 
                    Make sure to review the results and apply your own security expertise for critical systems.
                    Never upload sensitive production files or credentials.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </main>
    </div>
  );
};

export default FeedVulnerability;
