
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  vulnerabilities: [
    {
      id: 1,
      name: 'SQL Injection in Login Form',
      severity: 'Critical',
      status: 'Open',
      description: 'Potential SQL injection vulnerability in user authentication',
      dateFound: '2024-01-15',
      assignee: 'John Doe',
      logs: ['Initial discovery', 'Assigned to security team'],
      patchRiskNotes: 'High risk - affects user authentication system',
    },
    {
      id: 2,
      name: 'XSS in Comment Section',
      severity: 'High',
      status: 'In Progress',
      description: 'Cross-site scripting vulnerability in user comments',
      dateFound: '2024-01-12',
      assignee: 'Jane Smith',
      logs: ['Reported by user', 'Investigation started', 'Patch in development'],
      patchRiskNotes: 'Medium risk - limited to comment functionality',
    },
    {
      id: 3,
      name: 'Outdated SSL Certificate',
      severity: 'Medium',
      status: 'Resolved',
      description: 'SSL certificate approaching expiration',
      dateFound: '2024-01-10',
      assignee: 'Mike Johnson',
      logs: ['Certificate renewal scheduled', 'New certificate installed'],
      patchRiskNotes: 'Low risk - routine maintenance',
    },
  ],
  loading: false,
  error: null,
  filters: {
    severity: 'All',
    status: 'All',
    assignee: 'All',
  },
  sortBy: 'dateFound',
  sortOrder: 'desc',
};

const vulnerabilitySlice = createSlice({
  name: 'vulnerabilities',
  initialState,
  reducers: {
    setVulnerabilities: (state, action) => {
      state.vulnerabilities = action.payload;
    },
    addVulnerability: (state, action) => {
      state.vulnerabilities.push(action.payload);
    },
    updateVulnerability: (state, action) => {
      const index = state.vulnerabilities.findIndex(v => v.id === action.payload.id);
      if (index !== -1) {
        state.vulnerabilities[index] = { ...state.vulnerabilities[index], ...action.payload };
      }
    },
    deleteVulnerability: (state, action) => {
      state.vulnerabilities = state.vulnerabilities.filter(v => v.id !== action.payload);
    },
    setFilters: (state, action) => {
      state.filters = { ...state.filters, ...action.payload };
    },
    setSorting: (state, action) => {
      state.sortBy = action.payload.sortBy;
      state.sortOrder = action.payload.sortOrder;
    },
    setLoading: (state, action) => {
      state.loading = action.payload;
    },
    setError: (state, action) => {
      state.error = action.payload;
    },
  },
});

export const {
  setVulnerabilities,
  addVulnerability,
  updateVulnerability,
  deleteVulnerability,
  setFilters,
  setSorting,
  setLoading,
  setError,
} = vulnerabilitySlice.actions;

export default vulnerabilitySlice.reducer;
